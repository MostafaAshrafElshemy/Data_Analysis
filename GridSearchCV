#!/usr/bin/env python
# coding: utf-8

# <h2 align='center' style='color:purple'>Finding best model and hyper parameter tunning using GridSearchCV</h2>

# **For iris flower dataset in sklearn library, we are going to find out best model and best hyper parameters using GridSearchCV**

# <img src='iris_petal_sepal.png' height=300 width=300 />

# **Load iris flower dataset**

# In[33]:


from sklearn import svm, datasets
iris = datasets.load_iris()


# In[104]:


import pandas as pd
df = pd.DataFrame(iris.data,columns=iris.feature_names)
df['flower'] = iris.target
df['flower'] = df['flower'].apply(lambda x: iris.target_names[x])
df[47:150]


# <h3 style='color:blue'>Approach 1: Use train_test_split and manually tune parameters by trial and error</h3>

# In[109]:


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.3)


# In[110]:


model = svm.SVC(kernel='rbf',C=30,gamma='auto')
model.fit(X_train,y_train)
model.score(X_test, y_test)


# <h3 style='color:blue'>Approach 2: Use K Fold Cross validation</h3>

# **Manually try suppling models with different parameters to cross_val_score function with 5 fold cross validation**

# In[18]:


cross_val_score(svm.SVC(kernel='linear',C=10,gamma='auto'),iris.data, iris.target, cv=5)


# In[19]:


cross_val_score(svm.SVC(kernel='rbf',C=10,gamma='auto'),iris.data, iris.target, cv=5)


# In[20]:


cross_val_score(svm.SVC(kernel='rbf',C=20,gamma='auto'),iris.data, iris.target, cv=5)


# **Above approach is tiresome and very manual. We can use for loop as an alternative**

# In[15]:


kernels = ['rbf', 'linear']
C = [1,10,20]
avg_scores = {}
for kval in kernels:
    for cval in C:
        cv_scores = cross_val_score(svm.SVC(kernel=kval,C=cval,gamma='auto'),iris.data, iris.target, cv=5)
        avg_scores[kval + '_' + str(cval)] = np.average(cv_scores)

avg_scores


# **From above results we can say that rbf with C=1 or 10 or linear with C=1 will give best performance**

# <h3 style='color:blue'>Approach 3: Use GridSearchCV</h3>

# **GridSearchCV does exactly same thing as for loop above but in a single line of code**

# In[95]:


from sklearn.model_selection import GridSearchCV
clf = GridSearchCV(svm.SVC(gamma='auto'), {
    'C': [1,10,20],
    'kernel': ['rbf','linear']
}, cv=5, return_train_score=False)
clf.fit(iris.data, iris.target)
clf.cv_results_


# In[21]:


df = pd.DataFrame(clf.cv_results_)
df


# In[23]:


df[['param_C','param_kernel','mean_test_score']]


# In[24]:


clf.best_params_


# In[27]:


clf.best_score_


# In[78]:


dir(clf)


# **Use RandomizedSearchCV to reduce number of iterations and with random combination of parameters. This is useful when you have too many parameters to try and your training time is longer. It helps reduce the cost of computation**

# In[102]:


from sklearn.model_selection import RandomizedSearchCV
rs = RandomizedSearchCV(svm.SVC(gamma='auto'), {
        'C': [1,10,20],
        'kernel': ['rbf','linear']
    }, 
    cv=5, 
    return_train_score=False, 
    n_iter=2
)
rs.fit(iris.data, iris.target)
pd.DataFrame(rs.cv_results_)[['param_C','param_kernel','mean_test_score']]


# **How about different models with different hyperparameters?**

# In[92]:


from sklearn import svm
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression

model_params = {
    'svm': {
        'model': svm.SVC(gamma='auto'),
        'params' : {
            'C': [1,10,20],
            'kernel': ['rbf','linear']
        }  
    },
    'random_forest': {
        'model': RandomForestClassifier(),
        'params' : {
            'n_estimators': [1,5,10]
        }
    },
    'logistic_regression' : {
        'model': LogisticRegression(solver='liblinear',multi_class='auto'),
        'params': {
            'C': [1,5,10]
        }
    }
}


# In[93]:


scores = []

for model_name, mp in model_params.items():
    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)
    clf.fit(iris.data, iris.target)
    scores.append({
        'model': model_name,
        'best_score': clf.best_score_,
        'best_params': clf.best_params_
    })
    
df = pd.DataFrame(scores,columns=['model','best_score','best_params'])
df


# **Based on above, I can conclude that SVM with C=1 and kernel='rbf' is the best model for solving my problem of iris flower classification**
